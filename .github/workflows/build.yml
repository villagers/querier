name: .NET
permissions: write-all

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
  test_mysql:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Setup MySQL
      run: |
        sudo /etc/init.d/mysql start
        mysql -u root -p'root' < scripts/Chinook_MySql.sql
        mysql -u root -p'root' -e 'SHOW TABLES;' Chinook
    - name: Test
      run: dotnet test --verbosity normal
  test_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*" 
      - name: Semantic Release
        run: npx semantic-release --branches ${{ github.head_ref }} --dry-run --no-ci --debug
        
        
#        uses: cycjimmy/semantic-release-action@v4
#        with:
#          ci: false
#          dry_run: true
#          branches: |
#            ['${{ github.ref }}', '${{ github.head_ref }}']
#          working_directory: ./src
#          extra_plugins: |
#            @semantic-release/commit-analyzer
#            @semantic-release/release-notes-generator
#            @semantic-release/github
#            @semantic-release/git
#            @semantic-release/exec
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
#      - name: 'Pack & Publish project'
#        if: ${{ steps.release.outputs.new_release_version }}
#        run: |
#          dotnet clean
#          dotnet pack ${{ env.PROJECT_PATH }} --configuration Release --include-symbols --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
#          dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg -k ${{ secrets.NUGET_TOKEN }} -s ${{ env.NUGET_PUSH_URL }}
